

# 1. 리스트

# 1) 자료의 집합

#개별변수는 정수면 정수, 실수면 실수 식으로 딱 하나의 값만 저장히잠ㄴ 리스트는 여러 개의 값을 집합적으로 저장한다. 실제 배열과 비슷한 방식으로 사용한다.

score = [88, 95, 70, 100, 99] # 같은 타입으로 모든 요소를 구성할 수 도 있다.

namescore = ["안녕", 88, "바이", 99] #와 같이 다른 타입으로 요소를 구성할 수 있다.


# 빈 리스트는 [] 또는 list()함수로 만들 수 있다.
print(list("korea")) 
# --> 결과값은 ['k', 'o', 'r', 'e', 'a'] 이다. 즉, list 함수는 문자열의 값들을 요소로 나누어 리스트에 저장하는 것이라고 할 수 있다.

a = "안녕'하세요'ㅋㅋ"
print(a.split('\'')) # '을 기준으로 split해주는 것으로 문자열 관리에서 공부했는데, list와 마찬가지로 split도 구분자를 통해 여러 개의 문자열로 나누는것으로 list와 비슷한 기능을 하는것으로 생각하자.


# 2) 리스트의 요소

## 아래는 모두 88을 출력하는 것이다.
print(score[0])
print(score[-5])
print(score[-len(score)])


#list도 slice를 이용할 수 있다.
nums = [0,1,2,3,4,5,6,7,8,9]
print(nums[2:5]) # 2~4까지 출력
print(nums[1:7:2]) # 1~6중에 2 간격으로 출력, 즉 1,3,5  출력

# list의 값을 삭제하는 방법으로는
nums[2:5] = [] #이 코드에서는 2,3,4 부분의 값들을 모두 비우는 것을 의미
del nums[4] # 이 코드는 앞에 코드에서 삭제된 리스트 요소 값을 제거한 리스트에서 4번째 값 한개를 지운다.


# 3) 이중리스트

#list 안에는 또 list가 요소로도 들어갈 수 있다.
lol = [[1,2,3], [4,5], [6,7,8,9]]
print(lol[0]) # [1,2,3을 출력
print(lol[2][1]) # 7을 출력

for sub in lol:
    for item in sub:
        print(item, end=' ')
    print() # \n 출력


# 4) 리스트 컴프리 헨션

#리스트 안의 요소가 일정한 규칙을 가지는 수열이라면 일일이 나열할 필요 없이 리스트 컴프리헨션을 이용한다.
# [수식 for 변수 in 리스트 if 조건] 의 형태이다.

nums = [n * 2 for n in range(1,11)]
for i in nums:
    print(i, end=',')
print()

nums = [n for n in range(1,11) if n % 3 ==0] # [3,6,9] 출력
for i in nums :
    print(i, end=' ')
print()



# ----------------------------------------------------------------------------------------------------
# 2. 리스트 관리


# 1) 삽입
# 리스트는 문자열과 달리 변경이 가능하다.
# append와 insert 함수를 이용한다.

nums = [1,2,3,4]
nums.append(5) # 맨 마지막 요소 뒤에 5를 추가
nums.insert(2,99) # 2번째 값에 99를 넣고 원래 2~ 끝자리 까지는 뒤로 밀림

#insert와 비슷한 코드는
nums = [1,2,3,4]
nums[2:2] = [90, 91, 92] 
#와 같이, 2자리 부터 2자리까지 90~92 값을 넣어서 1,2,90,91,92,3,4로 nums를 만든다

# 그러나 아래의 코드는 다르다.
nums = [1,2,3,4]
nums[2] = [90, 91, 92] 
#위의 코드는 1,2, [90, 91, 92] ,4를 출력하게 된다.


# extend는 리스트에 리스트를 병합하는 함수이다.
list1 = [1,2,3,4,5]
list2 = [6,7,8]
list1.extend(list2) # list1뒤에 list2 병합
print(list1, end='\n')

#아래의 코드는 extend와 같은 실행을 하는 코드이다
list1 = [1,2,3,4,5]
list3 = list1+list2
print(list3, end='\n')



# 2) 삭제
#삭제는 위에서 다룬 del 함수나 값 범위에 []를 입력하는 식으로 할 수 있지만 이에 더해
# pop 함수를 이용할수도 있다.

tmp = [1,2,3,4,5]
tmp.pop() # 맨뒤에 있는 5 삭제
tmp.pop(1) # 1번째 요소 삭제
print(tmp)


# 3) 검색
# index는 해당 요소의 위치 반환, count는 해당 요소의 개수를 조사


# ----------------------------------------------------------------------------------------------------

# 3. 튜플

#튜플은 리스트와 유사하지만, 초기화한 후 편집할 수 없다는 점이 다르다.
#따라서 튜플을 상수 리스트라고도 부른다.
#튜플은 []가 아니라 ()을 이용해서 정의한다.

socre = (88, 95, 70, 100, 99)
#혹은
score = 88, 95, 70, 100, 99 
#로 두가지 방법으로 튜플을 정의할 수 있다.


#튜플에 저장된 값을 풀어헤쳐 변수에 나누어 대입하는 방법
tu = "이", "김", "강"
lee, kim, kang = tu
print(lee) #이
print(kim) #김
print(kang) #강

#아래의 코드와 위의 코드는 같은 실행을 한다.
for i in tu:
    print(i, end=' ')


#튜플을 사용하는 이유는 뭘까?
#튜플로 가능한 일은 리스트로도 모두 가능한데, 왜 굳이 변경이 불가능한 튜플을 사용할까?
# 그이유는 리스트는 항상 변경에 대비해야 하므로 더 많은 메모리를 사용하고 속도도 느리지만 튜플은 내부 구조가 단순하고 읽는 속도가 빠른 장점이 있다
# 또한 편집이 없기에 안정적이라는 장점이 있기 때문에 튜플을 사용하는 것이다.
# 튜플과 리스트는 각자 tuple()함수와 list()함수로 변환이 가능하다.